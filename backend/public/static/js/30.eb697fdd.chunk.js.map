{"version":3,"sources":["components/books/search-components/genre/Genre.js"],"names":["SearchByGenre","useState","form","setForm","errors","setErrors","books","setBooks","isResult","setIsResult","shouldShow","setShouldShow","usePaginate","data","totalCount","pageSize","currentPage","handlePageChange","findFormErrors","keyword","newErrors","undefined","className","onSubmit","e","preventDefault","Object","keys","length","searchByGenre","then","x","style","width","marginLeft","Group","Control","onChange","field","value","target","placeholder","isInvalid","Feedback","type","marginTop","map","book","id","_id","itemsCount","onPageChange","Math","ceil"],"mappings":"kPASe,SAASA,IACpB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAoCR,oBAAS,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAsEC,YAAYN,GAA1EO,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,SAAUC,EAApC,EAAoCA,YAAaC,EAAjD,EAAiDA,iBA8B3CC,EAAiB,WACnB,IAAQC,EAAYjB,EAAZiB,QACFC,EAAY,GAMlB,YAJgBC,IAAZF,GAAqC,KAAZA,IACzBC,EAAUD,QAAU,wBAGjBC,GAGX,OAAO,gCACH,oBAAIE,UAAU,mCAAd,6BACA,eAAC,IAAD,CAAMC,SA9BW,SAACC,GAClBA,EAAEC,iBACF,IAAML,EAAYF,IACdQ,OAAOC,KAAKP,GAAWQ,OAAS,EAChCvB,EAAUe,GAGdS,YAAc3B,EAAKiB,SAASW,MAAK,SAAAC,GAC7BxB,EAASwB,GACLzB,EAAMsB,OAAS,GACfnB,GAAY,GAEhBE,GAAc,OAkBYqB,MAAO,CAAEC,MAAO,MAAOC,WAAY,OAAjE,UACI,eAAC,IAAKC,MAAN,WACI,cAAC,IAAKC,QAAN,CAAcC,SAAU,SAAAb,GAAC,OA3CnBc,EA2CgC,UA3CzBC,EA2CoCf,EAAEgB,OAAOD,MA1ClEpC,EAAQ,2BACDD,GADA,kBAEFoC,EAAQC,UAEPnC,EAAOkC,IAAQjC,EAAU,2BACxBD,GADuB,kBAEzBkC,EAAQ,SAPA,IAACA,EAAOC,GA4CTE,YAAY,UAAUC,YAAatC,EAAOe,UAC9C,cAAC,IAAKiB,QAAQO,SAAd,CAAuBC,KAAK,UAA5B,SAAuCxC,EAAOe,aAElD,cAAC,IAAD,CAAQyB,KAAK,SAASZ,MAAO,CAAEa,UAAW,MAA1C,uBAEHnC,EACGF,EACM,qCACGK,EAAKiC,KAAI,SAAAC,GAAI,OAAI,cAAC,IAAD,CAAUA,KAAMA,EAAqBC,GAAID,EAAKE,KAAnBF,EAAKE,QAClD,cAAC,IAAD,CACIC,WAAYpC,EACZC,SAAUA,EACVC,YAAaA,EACbmC,aAAclC,IANpB,QAOQD,EAPR,OAOyBoC,KAAKC,KAAKvC,EAAaC,MAEhD,2CACJ","file":"static/js/30.eb697fdd.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport usePaginate from '../../../../hooks/usePaginate'\r\nimport BookItem from '../../utils/BookItem'\r\nimport Pagination from \"../../utils/Pagination/Pagination\"\r\nimport { searchByGenre } from '../../../../services/search-service'\r\n\r\nexport default function SearchByGenre() {\r\n    const [form, setForm] = useState({})\r\n    const [errors, setErrors] = useState({})\r\n    const [books, setBooks] = useState([])\r\n    const [isResult, setIsResult] = useState(false)\r\n    const [shouldShow, setShouldShow] = useState(false)\r\n    const { data, totalCount, pageSize, currentPage, handlePageChange } = usePaginate(books)\r\n\r\n    const setField = (field, value) => {\r\n        setForm({\r\n            ...form,\r\n            [field]: value\r\n        })\r\n        if (!!errors[field]) setErrors({\r\n            ...errors,\r\n            [field]: null\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const newErrors = findFormErrors()\r\n        if (Object.keys(newErrors).length > 0) {\r\n            setErrors(newErrors)\r\n            return\r\n        }\r\n        searchByGenre(form.keyword).then(x => {\r\n            setBooks(x)\r\n            if (books.length > 0) {\r\n                setIsResult(true)\r\n            }\r\n            setShouldShow(true)\r\n        })\r\n\r\n    }\r\n\r\n    const findFormErrors = () => {\r\n        const { keyword } = form\r\n        const newErrors = {}\r\n\r\n        if (keyword === undefined || keyword === '') {\r\n            newErrors.keyword = 'Keyword is required!'\r\n        }\r\n\r\n        return newErrors\r\n    }\r\n\r\n    return <div>\r\n        <h1 className=\"my-4 font-weight-bold .display-4\">Search by genre</h1>\r\n        <Form onSubmit={handleSubmit} style={{ width: \"50%\", marginLeft: \"27%\" }}>\r\n            <Form.Group>\r\n                <Form.Control onChange={e => setField('keyword', e.target.value)}\r\n                    placeholder=\"Keyword\" isInvalid={!!errors.keyword} />\r\n                <Form.Control.Feedback type=\"invalid\">{errors.keyword}</Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Button type=\"submit\" style={{ marginTop: \"2%\" }}>Search</Button>\r\n        </Form>\r\n        {shouldShow ?\r\n            isResult\r\n                ? <>\r\n                    {data.map(book => <BookItem book={book} key={book._id} id={book._id}></BookItem>)}\r\n                    <Pagination\r\n                        itemsCount={totalCount}\r\n                        pageSize={pageSize}\r\n                        currentPage={currentPage}\r\n                        onPageChange={handlePageChange} />\r\n                    page {currentPage} of {Math.ceil(totalCount / pageSize)}\r\n                </>\r\n                : <p>No results</p>\r\n            : null\r\n        }\r\n    </div >\r\n\r\n}"],"sourceRoot":""}