{"version":3,"sources":["validators.js","components/auth/Register/Register.js"],"names":["isEmpty","string","length","undefined","equals","a","b","isLength","isURL","url","test","isEmail","email","isGuest","dispatch","useDispatch","navigate","useNavigate","useState","form","setForm","errors","setErrors","doShowPassword","setDoShowPassword","setField","field","value","findFormErrors","password","username","confirmPassword","newErrors","className","style","width","onSubmit","e","preventDefault","Object","keys","register","then","x","localStorage","setItem","_id","login","catch","alert","message","role","Group","Label","Control","type","onChange","target","isInvalid","Feedback","marginTop","Check","label","autoComplete","variant"],"mappings":"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","file":"static/js/28.760c02fa.chunk.js","sourcesContent":["export function isEmpty(string) {\r\n    if (string.length === 0 || string === undefined) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport function equals(a, b) {\r\n    if (a === b) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport function isLength(string, length) {\r\n    if (string.length >= length) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nexport function isURL(url) {\r\n    const regex = /^(https:|http:|www\\.)\\S*/gm\r\n    return regex.test(url)\r\n}\r\n\r\nexport function isEmail(email) {\r\n    const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/\r\n    return regex.test(email)\r\n}","import React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router'\r\nimport { useDispatch } from 'react-redux'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { register } from '../../../services/auth-service'\r\nimport { isEmail, equals, isLength } from '../../../validators'\r\nimport { isGuest } from '../../../hoc/isGuest'\r\nimport { login } from '../../../redux/slices/authSlice'\r\n\r\nfunction Signup() {\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const [form, setForm] = useState({})\r\n    const [errors, setErrors] = useState({})\r\n    const [doShowPassword, setDoShowPassword] = useState(false)\r\n\r\n    const checkboxChange = () => [\r\n        setDoShowPassword(!doShowPassword)\r\n    ]\r\n\r\n    const setField = (field, value) => {\r\n        setForm({\r\n            ...form,\r\n            [field]: value\r\n        })\r\n        if (!!errors[field]) setErrors({\r\n            ...errors,\r\n            [field]: null\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        const newErrors = findFormErrors()\r\n        if (Object.keys(newErrors).length > 0) {\r\n            setErrors(newErrors)\r\n            return\r\n        } else {\r\n            register(form).then(x => {\r\n                localStorage.setItem('token', x._id)\r\n                localStorage.setItem('username', x.username)\r\n                dispatch(login())\r\n                navigate('/')\r\n            }).catch(e => {\r\n                alert(e.message)\r\n            })\r\n        }\r\n    }\r\n\r\n    const findFormErrors = () => {\r\n        // eslint-disable-next-line\r\n        const { email, username, password, confirmPassword } = form\r\n        const newErrors = {}\r\n\r\n        if (!isEmail(email)) {\r\n            newErrors.email = 'Email is invalid!'\r\n        }\r\n        if (!isLength(password, 6)) {\r\n            newErrors.password = 'Password must be at least 6 characters!'\r\n        }\r\n        if (!equals(password, confirmPassword)) {\r\n            newErrors.confirmPassword = 'Passwords do not match!'\r\n        }\r\n\r\n        return newErrors\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"my-4 font-weight-bold .display-4\">Sign Up</h1>\r\n            <Form style={{ width: '300px' }} onSubmit={handleSubmit} role=\"form\">\r\n                <Form.Group>\r\n                    <Form.Label>Username*</Form.Label>\r\n                    <Form.Control data-testid=\"input-2\" type=\"text\" onChange={e => setField('username', e.target.value)} isInvalid={!!errors.username} />\r\n                    <Form.Control.Feedback type='invalid' data-testid=\"invalid-2\">\r\n                        {errors.username}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group style={{ marginTop: \"5%\" }}>\r\n                    <Form.Label>Email*</Form.Label>\r\n                    <Form.Control type=\"email\" data-testid=\"input-1\" onChange={e => setField('email', e.target.value)} isInvalid={!!errors.email} />\r\n                    <Form.Control.Feedback type='invalid' data-testid=\"invalid-1\">\r\n                        {errors.email}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group style={{ marginTop: \"5%\" }}>\r\n                    <Form.Label>Password* / <Form.Check style={{ marginTop: \"5%\" }} label=\"Show password\" data-testid=\"checkbox-1\" onChange={checkboxChange}></Form.Check></Form.Label>\r\n                    <Form.Control data-testid=\"input-3\" role=\"input\" type={doShowPassword ? 'text' : 'password'} autoComplete=\"\" onChange={e => setField('password', e.target.value)} isInvalid={!!errors.password} />\r\n                    <Form.Control.Feedback type='invalid' data-testid=\"invalid-3\">\r\n                        {errors.password}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group style={{ marginTop: \"5%\" }}>\r\n                    <Form.Label>Confirm Password*</Form.Label>\r\n                    <Form.Control type=\"password\" role=\"confirm-pass\" autoComplete=\"\" onChange={e => setField('confirmPassword', e.target.value)} isInvalid={!!errors.confirmPassword} />\r\n                    <Form.Control.Feedback type='invalid' role=\"invalid-confirm\">\r\n                        {errors.confirmPassword}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Button type=\"submit\" variant=\"success\" style={{ marginTop: \"5%\" }}>Register</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default isGuest(Signup)"],"sourceRoot":""}