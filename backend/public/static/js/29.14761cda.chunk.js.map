{"version":3,"sources":["components/auth/Login/Login.js"],"names":["isGuest","user","useSelector","state","dispatch","useDispatch","navigate","useNavigate","useState","form","setForm","errors","setErrors","doShowPassword","setDoShowPassword","token","setField","field","value","findFormErrors","emailOrUsername","password","newErrors","length","className","style","width","onSubmit","e","preventDefault","Object","keys","login","then","x","localStorage","setItem","_id","username","authSliceLogin","catch","alert","message","Group","Label","Control","type","onChange","target","isInvalid","placeholder","Feedback","marginTop","Check","label","autoComplete","variant"],"mappings":"gNA8FeA,uBApFf,WACI,IAAMC,EAAOC,aAAY,SAACC,GAAD,OAAWA,EAAMF,QACpCG,EAAWC,cACXC,EAAWC,cACjB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4CJ,oBAAS,GAArD,mBAAOK,EAAP,KAAuBC,EAAvB,KAMA,GAAmB,OAAfb,EAAKc,MAEL,OADAT,EAAS,KACF,KAGX,IAAMU,EAAW,SAACC,EAAOC,GACrBR,EAAQ,2BACDD,GADA,kBAEFQ,EAAQC,KAEPP,EAAOM,IAAQL,EAAU,2BACxBD,GADuB,kBAEzBM,EAAQ,SAsBXE,EAAiB,WACnB,IAAQC,EAA8BX,EAA9BW,gBAAiBC,EAAaZ,EAAbY,SACnBC,EAAY,GASlB,OAPIF,GAA8C,IAA3BA,EAAgBG,SACnCD,EAAUF,gBAAkB,kCAE5BC,GAAgC,IAApBA,EAASE,SACrBD,EAAUD,SAAW,yBAGlBC,GAGX,OACI,gCACI,oBAAIE,UAAU,mCAAd,qBACA,eAAC,IAAD,CAAMC,MAAO,CAAEC,MAAO,SAAWC,SAnCpB,SAAAC,GACjBA,EAAEC,iBACF,IAAMP,EAAYH,IACdW,OAAOC,KAAKT,GAAWC,OAAS,EAChCX,EAAUU,GAGVU,YAAMvB,GAAMwB,MAAK,SAAAC,GACbC,aAAaC,QAAQ,QAASF,EAAEG,KAChCF,aAAaC,QAAQ,WAAYF,EAAEI,UACnClC,EAASmC,eACTjC,EAAS,QACVkC,OAAM,SAAAZ,GACLa,MAAMb,EAAEc,aAsBZ,UACI,eAAC,IAAKC,MAAN,WACI,cAAC,IAAKC,MAAN,iCACA,cAAC,IAAKC,QAAN,CAAcC,KAAK,OAAOC,SAAU,SAAAnB,GAAC,OAAIZ,EAAS,kBAAmBY,EAAEoB,OAAO9B,QAAQ+B,YAAatC,EAAOS,gBAAiB8B,YAAY,oBAAoB,cAAY,YACvK,cAAC,IAAKL,QAAQM,SAAd,CAAuBL,KAAK,UAAU,cAAY,YAAlD,SACKnC,EAAOS,qBAGhB,eAAC,IAAKuB,MAAN,CAAYlB,MAAO,CAAE2B,UAAW,MAAhC,UACI,eAAC,IAAKR,MAAN,0BAAwB,cAAC,IAAKS,MAAN,CAAYC,MAAM,gBAAgBP,SAhEnD,WACnBjC,GAAmBD,SAgEP,cAAC,IAAKgC,QAAN,CAAc,cAAY,UAAUC,KAAMjC,EAAiB,OAAS,WAAY0C,aAAa,YAAYR,SAAU,SAAAnB,GAAC,OAAIZ,EAAS,WAAYY,EAAEoB,OAAO9B,QAAQ+B,YAAatC,EAAOU,SAAU6B,YAAY,aACxM,cAAC,IAAKL,QAAQM,SAAd,CAAuBL,KAAK,UAAU,cAAY,YAAlD,SACKnC,EAAOU,cAGhB,cAAC,IAAD,CAAQyB,KAAK,SAASU,QAAQ,UAAU,cAAY,SAAS/B,MAAO,CAAE2B,UAAW,MAAjF","file":"static/js/29.14761cda.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useNavigate } from 'react-router'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { login as authSliceLogin } from '../../../redux/slices/authSlice'\r\n\r\nimport { login } from '../../../services/auth-service'\r\nimport { isGuest } from '../../../hoc/isGuest'\r\n\r\nfunction Signin() {\r\n    const user = useSelector((state) => state.user)\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const [form, setForm] = useState({})\r\n    const [errors, setErrors] = useState({})\r\n    const [doShowPassword, setDoShowPassword] = useState(false)\r\n\r\n    const checkboxChange = () => {\r\n        setDoShowPassword(!doShowPassword)\r\n    }\r\n\r\n    if (user.token !== null) {\r\n        navigate('/')\r\n        return null\r\n    }\r\n\r\n    const setField = (field, value) => {\r\n        setForm({\r\n            ...form,\r\n            [field]: value\r\n        })\r\n        if (!!errors[field]) setErrors({\r\n            ...errors,\r\n            [field]: null\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        const newErrors = findFormErrors()\r\n        if (Object.keys(newErrors).length > 0) {\r\n            setErrors(newErrors)\r\n            return\r\n        } else {\r\n            login(form).then(x => {\r\n                localStorage.setItem('token', x._id)\r\n                localStorage.setItem('username', x.username)\r\n                dispatch(authSliceLogin())\r\n                navigate('/')\r\n            }).catch(e => {\r\n                alert(e.message)\r\n            })\r\n        }\r\n    }\r\n\r\n    const findFormErrors = () => {\r\n        const { emailOrUsername, password } = form\r\n        const newErrors = {}\r\n\r\n        if (emailOrUsername && emailOrUsername.length === 0) {\r\n            newErrors.emailOrUsername = 'Email or username is required!'\r\n        }\r\n        if (password && password.length === 0) {\r\n            newErrors.password = 'Password is required!'\r\n        }\r\n\r\n        return newErrors\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"my-4 font-weight-bold .display-4\">Sign In</h1>\r\n            <Form style={{ width: '300px' }} onSubmit={handleSubmit}>\r\n                <Form.Group>\r\n                    <Form.Label>Email or username*</Form.Label>\r\n                    <Form.Control type=\"text\" onChange={e => setField('emailOrUsername', e.target.value)} isInvalid={!!errors.emailOrUsername} placeholder=\"Email or username\" data-testid=\"input-1\" />\r\n                    <Form.Control.Feedback type='invalid' data-testid=\"invalid-1\">\r\n                        {errors.emailOrUsername}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group style={{ marginTop: \"5%\" }}>\r\n                    <Form.Label>Password* / <Form.Check label=\"Show password\" onChange={checkboxChange}></Form.Check></Form.Label>\r\n                    <Form.Control data-testid=\"input-2\" type={doShowPassword ? 'text' : 'password'} autoComplete=\"your-pass\" onChange={e => setField('password', e.target.value)} isInvalid={!!errors.password} placeholder=\"Password\" />\r\n                    <Form.Control.Feedback type='invalid' data-testid=\"invalid-2\">\r\n                        {errors.password}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Button type=\"submit\" variant=\"success\" data-testid=\"button\" style={{ marginTop: \"5%\" }}>Sign in</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default isGuest(Signin)"],"sourceRoot":""}